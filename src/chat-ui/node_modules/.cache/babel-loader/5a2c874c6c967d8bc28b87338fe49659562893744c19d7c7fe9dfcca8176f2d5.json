{"ast":null,"code":"var _jsxFileName = \"/Users/almorris/react-gemini-chatbot/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ReactMarkdown from 'react-markdown';\nimport { HarmBlockThreshold, HarmCategory } from \"@google/generative-ai\";\nconst {\n  GoogleGenerativeAI\n} = require(\"@google/generative-ai\");\n// configure dotenv\nimport dotenv from 'dotenv';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndotenv.config();\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  useEffect(() => {\n    // No initial message here\n  }, []);\n  const handleMessageSend = async () => {\n    if (input.trim() !== '') {\n      const newMessage = {\n        text: input,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n      setInput('');\n      const safetySettings = [{\n        category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH\n      }, {\n        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH\n      }];\n      const generationConfig = {\n        stopSequences: [\"red\"],\n        maxOutputTokens: 200,\n        temperature: 0.9,\n        topP: 0.1,\n        topK: 16\n      };\n\n      // Send user's message to the bot and get response\n      try {\n        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n        const model = genAI.getGenerativeModel({\n          model: \"gemini-pro\",\n          safetySettings,\n          generationConfig\n        });\n        const chat = model.startChat();\n        const result = await chat.sendMessage(input);\n        const response = await result.response;\n        const text = response.text();\n        const botMessage = {\n          text: text,\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error(\"Error sending message to bot:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.sender === 'bot' ? /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this) : message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            handleMessageSend();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMessageSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"9O8vdW2/zxnqNWKJ7NIr/2i0F2U=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","ReactMarkdown","HarmBlockThreshold","HarmCategory","GoogleGenerativeAI","require","dotenv","jsxDEV","_jsxDEV","config","Chatbot","_s","messages","setMessages","input","setInput","handleMessageSend","trim","newMessage","text","sender","prevMessages","safetySettings","category","HARM_CATEGORY_HARASSMENT","threshold","BLOCK_ONLY_HIGH","HARM_CATEGORY_HATE_SPEECH","generationConfig","stopSequences","maxOutputTokens","temperature","topP","topK","genAI","process","env","GEMINI_API_KEY","model","getGenerativeModel","chat","startChat","result","sendMessage","response","botMessage","error","console","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["/Users/almorris/react-gemini-chatbot/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ReactMarkdown from 'react-markdown';\nimport { HarmBlockThreshold, HarmCategory } from \"@google/generative-ai\";\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n// configure dotenv\nimport dotenv from 'dotenv';\ndotenv.config();\n\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    // No initial message here\n  }, []);\n\n  const handleMessageSend = async () => {\n    if (input.trim() !== '') {\n      const newMessage = { text: input, sender: 'user' };\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n      setInput('');\n      const safetySettings = [\n        {\n          category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n          threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,\n        },\n        {\n          category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n          threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,\n        },\n      ]\n      const generationConfig = {\n        stopSequences: [\"red\"],\n        maxOutputTokens: 200,\n        temperature: 0.9,\n        topP: 0.1,\n        topK: 16,\n      };\n\n      // Send user's message to the bot and get response\n      try {\n        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n        const model = genAI.getGenerativeModel({ model: \"gemini-pro\" ,safetySettings , generationConfig});\n        const chat = model.startChat();\n        const result = await chat.sendMessage(input);\n        const response = await result.response;\n        const text = response.text();\n        const botMessage = { text: text, sender: 'bot' };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error(\"Error sending message to bot:\", error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-box\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.sender}`}>\n            {message.sender === 'bot' ? (\n              <ReactMarkdown>{message.text}</ReactMarkdown>\n            ) : (\n              message.text\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"input-box\">\n        <input\n          type=\"text\"\n          placeholder=\"Type a message...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              handleMessageSend();\n            }\n          }}\n        />\n        <button onClick={handleMessageSend}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}