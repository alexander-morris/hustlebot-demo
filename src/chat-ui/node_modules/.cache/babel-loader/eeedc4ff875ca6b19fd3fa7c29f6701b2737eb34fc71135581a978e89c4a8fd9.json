{"ast":null,"code":"var _jsxFileName = \"/Users/almorris/react-gemini-chatbot/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ReactMarkdown from 'react-markdown';\nimport { HarmBlockThreshold, HarmCategory } from \"@google/generative-ai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  GoogleGenerativeAI\n} = require(\"@google/generative-ai\");\nconst GEMINI_API_KEY = 'AIzaSyAXX2lr41IjOCH0wFXzd3BNGL4Yu6387VY';\nconst genAI = new GoogleGenerativeAI(GEMINI_API_KEY);\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  useEffect(() => {\n    // No initial message here\n    startUp(); //first execution\n  }, []);\n  const startUp = async () => {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\",\n      safetySettings,\n      generationConfig\n    });\n    const chat = model.startChat();\n    const text = await chat.sendMessage(\"Hey, I'm a HustleBot, let's start off by analyzing what kind of projects we can run together.\");\n    const botMessage = {\n      text: text,\n      sender: 'bot'\n    };\n    setMessages(prevMessages => [...prevMessages, botMessage]);\n  };\n  const handleMessageSend = async () => {\n    if (input.trim() !== '') {\n      const newMessage = {\n        text: input,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n      setInput('');\n      const safetySettings = [{\n        category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH\n      }, {\n        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH\n      }];\n      const generationConfig = {\n        stopSequences: [\"red\"],\n        maxOutputTokens: 200,\n        temperature: 0.9,\n        topP: 0.1,\n        topK: 16\n      };\n\n      // Send user's message to the bot and get response\n      try {\n        const result = await chat.sendMessage(input);\n        const response = await result.response;\n        const text = response.text();\n        const botMessage = {\n          text: text,\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error(\"Error sending message to bot:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.sender === 'bot' ? /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this) : message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            handleMessageSend();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMessageSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"9O8vdW2/zxnqNWKJ7NIr/2i0F2U=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","ReactMarkdown","HarmBlockThreshold","HarmCategory","jsxDEV","_jsxDEV","GoogleGenerativeAI","require","GEMINI_API_KEY","genAI","Chatbot","_s","messages","setMessages","input","setInput","startUp","model","getGenerativeModel","safetySettings","generationConfig","chat","startChat","text","sendMessage","botMessage","sender","prevMessages","handleMessageSend","trim","newMessage","category","HARM_CATEGORY_HARASSMENT","threshold","BLOCK_ONLY_HIGH","HARM_CATEGORY_HATE_SPEECH","stopSequences","maxOutputTokens","temperature","topP","topK","result","response","error","console","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["/Users/almorris/react-gemini-chatbot/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ReactMarkdown from 'react-markdown';\nimport { HarmBlockThreshold, HarmCategory } from \"@google/generative-ai\";\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\nconst GEMINI_API_KEY = 'AIzaSyAXX2lr41IjOCH0wFXzd3BNGL4Yu6387VY';\nconst genAI = new GoogleGenerativeAI(GEMINI_API_KEY);\n\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    // No initial message here\n    startUp()//first execution\n\n  }, []);\n\n  const startUp = async () => {\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" ,safetySettings , generationConfig});\n    const chat = model.startChat();\n    const text = await chat.sendMessage(\"Hey, I'm a HustleBot, let's start off by analyzing what kind of projects we can run together.\");\n    const botMessage = { text: text, sender: 'bot' };\n    setMessages(prevMessages => [...prevMessages, botMessage]);\n  }\n\n  const handleMessageSend = async () => {\n    if (input.trim() !== '') {\n      const newMessage = { text: input, sender: 'user' };\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n      setInput('');\n      const safetySettings = [\n        {\n          category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n          threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,\n        },\n        {\n          category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n          threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,\n        },\n      ]\n      const generationConfig = {\n        stopSequences: [\"red\"],\n        maxOutputTokens: 200,\n        temperature: 0.9,\n        topP: 0.1,\n        topK: 16,\n      };\n\n      // Send user's message to the bot and get response\n      try {\n        const result = await chat.sendMessage(input);\n        const response = await result.response;\n        const text = response.text();\n        const botMessage = { text: text, sender: 'bot' };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error(\"Error sending message to bot:\", error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-box\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.sender}`}>\n            {message.sender === 'bot' ? (\n              <ReactMarkdown>{message.text}</ReactMarkdown>\n            ) : (\n              message.text\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"input-box\">\n        <input\n          type=\"text\"\n          placeholder=\"Type a message...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              handleMessageSend();\n            }\n          }}\n        />\n        <button onClick={handleMessageSend}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}