import { OrcaPulse } from "@orcacompute/orca-node-client";
import { TASK_ID } from "@_koii/namespace-wrapper";
import { getPodSpec } from "./podSpec.js";
import { getTaskManager } from "../../main/taskManager.js";
import { OrcaConfig } from "../../types/orca.js";

class OrcaClient {
  constructor(
    public client: OrcaPulse | null = null,
    public isInitializing = false,
    public isInitialized = false,
    public rootCA: string | null = null,
  ) {}

  async initialize(
    imageURL: string | undefined,
    podSpec: string | undefined,
    rootCA: any,
  ): Promise<void> {
    console.log("Initializing Orca client");
    const taskManager = await getTaskManager();
    taskManager.registerExtension("orca", {
      percent: 0.01,
      publicKey: "ORCA",
    });
    if (this.isInitializing || this.isInitialized) {
      return;
    }
    this.isInitializing = true;
    this.rootCA = rootCA;
    try {
      this.client = new OrcaPulse();
      await this.client.initialize(
        imageURL,
        TASK_ID,
        "ws://127.0.0.1:3003",
        podSpec,
        "healthz",
        rootCA,
      );
      this.isInitialized = true;
      console.log("Orca client initialized");
    } catch (error) {
      let errorMessage;
      if (error instanceof Error) {
        errorMessage = error.message;
      } else {
        errorMessage = JSON.stringify(error);
      }
      this.client = null;
      throw new Error(`Orca client initialization failed: ${errorMessage}`);
    } finally {
      this.isInitializing = false;
    }
  }
}

const orcaClient = new OrcaClient();

export async function initializeOrcaClient(config: OrcaConfig): Promise<void> {
  const { imageURL, customPodSpec, rootCA } = config;
  console.log({ customPodSpec });
  orcaClient.initialize(
    imageURL,
    await getPodSpec(customPodSpec, rootCA),
    rootCA,
  );
}

export async function getOrcaClient(): Promise<OrcaPulse> {
  return new Promise((resolve, reject) => {
    if (orcaClient.isInitialized) {
      resolve(orcaClient.client!);
      return;
    }

    const checkInterval = setInterval(() => {
      if (orcaClient.isInitialized) {
        clearInterval(checkInterval);
        resolve(orcaClient.client!);
      }
    }, 500);

    setTimeout(() => {
      clearInterval(checkInterval);
      reject(new Error("OrcaClient initialization timed out."));
    }, 60000);
  });
}
