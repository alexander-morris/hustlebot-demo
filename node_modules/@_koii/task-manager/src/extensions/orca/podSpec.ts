import jsYaml from "js-yaml";
import lodash from "lodash";
import { TASK_ID, namespaceWrapper } from "@_koii/namespace-wrapper";

async function getDefaultPodSpec(rootCA: any): Promise<any> {
  const podId = TASK_ID;
  const basePath = await namespaceWrapper.getBasePath();
  await namespaceWrapper.fs("mkdir", "orca", { recursive: true });
  const protocol = rootCA ? "wss" : "ws";
  const orcaURL = `${protocol}://host.containers.internal:3003`;
  const defaultPodSpec = `apiVersion: v1
kind: Pod
metadata:
  name: ${podId}
spec:
  containers:
    - name: user-${podId}
      volumeMounts:
        - name: in-volume
          mountPath: /in
        - name: out-volume
          mountPath: /out
    - name: pulse-proxy-${podId}
      image: docker.io/orcacompute/pulse-proxy:main
      env:
        - name: ORCA_URL
          value: ${orcaURL}/${podId}
        - name: ORCA_POD_ID
          value: ${podId}
      volumeMounts:
        - name: in-volume
          mountPath: /in
        - name: out-volume
          mountPath: /out
  volumes:
    - name: in-volume
      hostPath:
        path: ${basePath}/orca/in-volume
        type: DirectoryOrCreate
    - name: out-volume
      hostPath:
        path: ${basePath}/orca/out-volume
        type: DirectoryOrCreate
  restartPolicy: Always`;
  return jsYaml.load(defaultPodSpec);
}

export async function getPodSpec(
  customPodSpec: string | undefined,
  rootCA: any,
): Promise<string | undefined> {
  if (!customPodSpec) {
    return;
  }
  const userPodSpec = jsYaml.load(customPodSpec) as any;
  const containerName = userPodSpec?.spec?.containers?.[0]?.name;
  if (!containerName) {
    throw new Error("No container name specified in custom podSpec");
  }
  const podImageURL = userPodSpec?.spec?.containers?.[0]?.image;

  if (!podImageURL) {
    throw new Error("No image specified in custom podSpec");
  }
  delete userPodSpec.apiVersion;
  delete userPodSpec.kind;
  delete userPodSpec.metadata?.name;
  const defaultPodSpec = await getDefaultPodSpec(rootCA);
  const podSpec = mergePodSpec(defaultPodSpec, userPodSpec);
  return jsYaml.dump(podSpec);
}

function mergePodSpec(defaultPodSpec: any, podSpec: any): any {
  function mergeContainers(
    objValue: any,
    srcValue: any,
    key: string,
  ): any[] | void {
    if (
      key === "containers" &&
      lodash.isArray(objValue) &&
      lodash.isArray(srcValue)
    ) {
      const objMap = lodash.keyBy(objValue, "name");
      const srcMap = lodash.keyBy(srcValue, "name");

      // Merge containers by name
      Object.keys(srcMap).forEach((name) => {
        if (objMap[name]) {
          objMap[name] = lodash.mergeWith(
            objMap[name],
            srcMap[name],
            concatArrays,
          );
        } else {
          objMap[name] = srcMap[name];
        }
      });

      return Object.values(objMap);
    }
  }

  function concatArrays(objValue: any[], srcValue: any[]): any[] | void {
    if (lodash.isArray(objValue)) {
      return objValue.concat(srcValue);
    }
  }

  return lodash.mergeWith(
    defaultPodSpec,
    podSpec,
    (objValue, srcValue, key) => {
      if (key === "containers") {
        return mergeContainers(objValue, srcValue, key);
      } else {
        return concatArrays(objValue, srcValue);
      }
    },
  );
}
