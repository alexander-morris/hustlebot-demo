import { task } from "./task.js";
import { submission } from "./submission.js";
import { audit } from "./audit.js";
import { distribution } from "./distribution.js";

class CoreLogic {
  async task(round: number): Promise<void> {
    await task.executeTask(round);
  }

  async submitTask(round: number): Promise<void> {
    await submission.submitTask(round);
  }

  async auditTask(round: number): Promise<void> {
    await audit.auditTask(round);
  }

  async selectAndGenerateDistributionList(
    round: number,
    isPreviousRoundFailed = false,
  ): Promise<void> {
    await distribution.selectAndGenerateDistributionList(
      round,
      isPreviousRoundFailed,
    );
  }

  async auditDistribution(round: number): Promise<void> {
    await distribution.auditDistribution(round);
  }

  async submitDistributionList(round: number): Promise<void> {
    await distribution.submitDistributionList(round);
  }
}

const coreLogic = new CoreLogic();

export { coreLogic };
