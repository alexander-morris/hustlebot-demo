import { coreLogic } from "./coreLogic.js";
import { namespaceWrapper, app } from "@_koii/namespace-wrapper";


export async function setupTask(): Promise<void> {
  if (app) {
    app.get("/taskState", async (_req, res) => {
      const state = await namespaceWrapper.getTaskState({
        is_submission_required: true,
        is_distribution_required: true,
        is_available_balances_required: true,
        is_stake_list_required: true,
      });
      console.log("TASK STATE", state);
      res.json({ taskState: state });
    });
  }

  try {
    await namespaceWrapper.defaultTaskSetup();
  } catch (error) {
    console.error("SETUP ERROR:", error);
  }

  process.on(
    "message",
    (m: {
      functionCall: string;
      roundNumber: number;
      isPreviousRoundFailed?: boolean;
    }) => {
      console.log("CHILD got message:", m);
      if (!m?.functionCall) {
        return;
      }
      console.log(`${m.functionCall} called`);
      switch (m.functionCall) {
        case "submitPayload":
          coreLogic.submitTask(m.roundNumber);
          break;
        case "auditPayload":
          coreLogic.auditTask(m.roundNumber);
          break;
        case "executeTask":
          coreLogic.task(m.roundNumber);
          break;
        case "generateAndSubmitDistributionList":
          coreLogic.selectAndGenerateDistributionList(
            m.roundNumber,
            m.isPreviousRoundFailed,
          );
          break;
        case "distributionListAudit":
          coreLogic.auditDistribution(m.roundNumber);
          break;
      }
    },
  );
}
