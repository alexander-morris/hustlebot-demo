var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { task } from "./task.js";
import { submission } from "./submission.js";
import { audit } from "./audit.js";
import { distribution } from "./distribution.js";
class CoreLogic {
    task(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield task.executeTask(round);
        });
    }
    submitTask(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield submission.submitTask(round);
        });
    }
    auditTask(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield audit.auditTask(round);
        });
    }
    selectAndGenerateDistributionList(round_1) {
        return __awaiter(this, arguments, void 0, function* (round, isPreviousRoundFailed = false) {
            yield distribution.selectAndGenerateDistributionList(round, isPreviousRoundFailed);
        });
    }
    auditDistribution(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield distribution.auditDistribution(round);
        });
    }
    submitDistributionList(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield distribution.submitDistributionList(round);
        });
    }
}
const coreLogic = new CoreLogic();
export { coreLogic };
