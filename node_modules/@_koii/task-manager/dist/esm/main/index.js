var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// required to use local staking wallet during testing in namespaceWrapper
import dotenv from "dotenv";
dotenv.config();
import { taskNodeAdministered, app } from "@_koii/namespace-wrapper";
import { setupTask } from "./task/setup.js";
import { getTaskManager } from "./taskManager.js";
export { getTaskManager, initializeTaskManager } from "./taskManager.js";
export { coreLogic as taskRunner } from "./task/coreLogic.js";
function startTask() {
    return __awaiter(this, void 0, void 0, function* () {
        if (taskNodeAdministered) {
            yield setupTask();
        }
        const taskManager = yield getTaskManager();
        yield taskManager.customSetup();
        console.log("after custom setup");
        if (!taskNodeAdministered) {
            app.use((req, _res, next) => {
                const directories = req.url.split("/");
                req.url = `/${directories.slice(3).join("/")}`;
                next();
            });
        }
        yield taskManager.setupRoutes();
    });
}
startTask();
