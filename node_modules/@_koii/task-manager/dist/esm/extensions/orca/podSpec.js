var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import jsYaml from "js-yaml";
import lodash from "lodash";
import { TASK_ID, namespaceWrapper } from "@_koii/namespace-wrapper";
function getDefaultPodSpec(rootCA) {
    return __awaiter(this, void 0, void 0, function* () {
        const podId = TASK_ID;
        const basePath = yield namespaceWrapper.getBasePath();
        yield namespaceWrapper.fs("mkdir", "orca", { recursive: true });
        const protocol = rootCA ? "wss" : "ws";
        const orcaURL = `${protocol}://host.containers.internal:3003`;
        const defaultPodSpec = `apiVersion: v1
kind: Pod
metadata:
  name: ${podId}
spec:
  containers:
    - name: user-${podId}
      volumeMounts:
        - name: in-volume
          mountPath: /in
        - name: out-volume
          mountPath: /out
    - name: pulse-proxy-${podId}
      image: docker.io/orcacompute/pulse-proxy:main
      env:
        - name: ORCA_URL
          value: ${orcaURL}/${podId}
        - name: ORCA_POD_ID
          value: ${podId}
      volumeMounts:
        - name: in-volume
          mountPath: /in
        - name: out-volume
          mountPath: /out
  volumes:
    - name: in-volume
      hostPath:
        path: ${basePath}/orca/in-volume
        type: DirectoryOrCreate
    - name: out-volume
      hostPath:
        path: ${basePath}/orca/out-volume
        type: DirectoryOrCreate
  restartPolicy: Always`;
        return jsYaml.load(defaultPodSpec);
    });
}
export function getPodSpec(customPodSpec, rootCA) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!customPodSpec) {
            return;
        }
        const userPodSpec = jsYaml.load(customPodSpec);
        const containerName = (_c = (_b = (_a = userPodSpec === null || userPodSpec === void 0 ? void 0 : userPodSpec.spec) === null || _a === void 0 ? void 0 : _a.containers) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.name;
        if (!containerName) {
            throw new Error("No container name specified in custom podSpec");
        }
        const podImageURL = (_f = (_e = (_d = userPodSpec === null || userPodSpec === void 0 ? void 0 : userPodSpec.spec) === null || _d === void 0 ? void 0 : _d.containers) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.image;
        if (!podImageURL) {
            throw new Error("No image specified in custom podSpec");
        }
        delete userPodSpec.apiVersion;
        delete userPodSpec.kind;
        (_g = userPodSpec.metadata) === null || _g === void 0 ? true : delete _g.name;
        const defaultPodSpec = yield getDefaultPodSpec(rootCA);
        const podSpec = mergePodSpec(defaultPodSpec, userPodSpec);
        return jsYaml.dump(podSpec);
    });
}
function mergePodSpec(defaultPodSpec, podSpec) {
    function mergeContainers(objValue, srcValue, key) {
        if (key === "containers" &&
            lodash.isArray(objValue) &&
            lodash.isArray(srcValue)) {
            const objMap = lodash.keyBy(objValue, "name");
            const srcMap = lodash.keyBy(srcValue, "name");
            // Merge containers by name
            Object.keys(srcMap).forEach((name) => {
                if (objMap[name]) {
                    objMap[name] = lodash.mergeWith(objMap[name], srcMap[name], concatArrays);
                }
                else {
                    objMap[name] = srcMap[name];
                }
            });
            return Object.values(objMap);
        }
    }
    function concatArrays(objValue, srcValue) {
        if (lodash.isArray(objValue)) {
            return objValue.concat(srcValue);
        }
    }
    return lodash.mergeWith(defaultPodSpec, podSpec, (objValue, srcValue, key) => {
        if (key === "containers") {
            return mergeContainers(objValue, srcValue, key);
        }
        else {
            return concatArrays(objValue, srcValue);
        }
    });
}
