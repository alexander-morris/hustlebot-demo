"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.submission = void 0;
const namespace_wrapper_1 = require("@_koii/namespace-wrapper");
const taskManager_js_1 = require("../taskManager.js");
class Submission {
    /**
     * Submits a task for a given round
     *
     */
    submitTask(round) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("SUBMIT TASK CALLED ROUND NUMBER", round);
            try {
                console.log("SUBMIT TASK SLOT", yield namespace_wrapper_1.namespaceWrapper.getSlot());
                const taskManager = yield (0, taskManager_js_1.getTaskManager)();
                const submission = yield taskManager.fetchSubmission(round);
                if (!(typeof submission === "string")) {
                    return;
                }
                const byteLength = Buffer.byteLength(submission, "utf8");
                if (byteLength > 512) {
                    throw new Error("Submission exceeds 512 bytes");
                }
                console.log("SUBMISSION", submission);
                yield namespace_wrapper_1.namespaceWrapper.checkSubmissionAndUpdateRound(submission, round);
                console.log("SUBMISSION CHECKED AND ROUND UPDATED");
                return submission;
            }
            catch (error) {
                console.log("ERROR IN SUBMISSION", error);
            }
        });
    }
}
exports.submission = new Submission();
