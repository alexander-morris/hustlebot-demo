"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.coreLogic = void 0;
const task_js_1 = require("./task.js");
const submission_js_1 = require("./submission.js");
const audit_js_1 = require("./audit.js");
const distribution_js_1 = require("./distribution.js");
class CoreLogic {
    task(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield task_js_1.task.executeTask(round);
        });
    }
    submitTask(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield submission_js_1.submission.submitTask(round);
        });
    }
    auditTask(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield audit_js_1.audit.auditTask(round);
        });
    }
    selectAndGenerateDistributionList(round_1) {
        return __awaiter(this, arguments, void 0, function* (round, isPreviousRoundFailed = false) {
            yield distribution_js_1.distribution.selectAndGenerateDistributionList(round, isPreviousRoundFailed);
        });
    }
    auditDistribution(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield distribution_js_1.distribution.auditDistribution(round);
        });
    }
    submitDistributionList(round) {
        return __awaiter(this, void 0, void 0, function* () {
            yield distribution_js_1.distribution.submitDistributionList(round);
        });
    }
}
const coreLogic = new CoreLogic();
exports.coreLogic = coreLogic;
