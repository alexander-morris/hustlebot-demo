"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeOrcaClient = initializeOrcaClient;
exports.getOrcaClient = getOrcaClient;
const orca_node_client_1 = require("@orcacompute/orca-node-client");
const namespace_wrapper_1 = require("@_koii/namespace-wrapper");
const podSpec_js_1 = require("./podSpec.js");
const taskManager_js_1 = require("../../main/taskManager.js");
class OrcaClient {
    constructor(client = null, isInitializing = false, isInitialized = false, rootCA = null) {
        this.client = client;
        this.isInitializing = isInitializing;
        this.isInitialized = isInitialized;
        this.rootCA = rootCA;
    }
    initialize(imageURL, podSpec, rootCA) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Initializing Orca client");
            const taskManager = yield (0, taskManager_js_1.getTaskManager)();
            taskManager.registerExtension("orca", {
                percent: 0.01,
                publicKey: "ORCA",
            });
            if (this.isInitializing || this.isInitialized) {
                return;
            }
            this.isInitializing = true;
            this.rootCA = rootCA;
            try {
                this.client = new orca_node_client_1.OrcaPulse();
                yield this.client.initialize(imageURL, namespace_wrapper_1.TASK_ID, "ws://127.0.0.1:3003", podSpec, "healthz", rootCA);
                this.isInitialized = true;
                console.log("Orca client initialized");
            }
            catch (error) {
                let errorMessage;
                if (error instanceof Error) {
                    errorMessage = error.message;
                }
                else {
                    errorMessage = JSON.stringify(error);
                }
                this.client = null;
                throw new Error(`Orca client initialization failed: ${errorMessage}`);
            }
            finally {
                this.isInitializing = false;
            }
        });
    }
}
const orcaClient = new OrcaClient();
function initializeOrcaClient(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const { imageURL, customPodSpec, rootCA } = config;
        console.log({ customPodSpec });
        orcaClient.initialize(imageURL, yield (0, podSpec_js_1.getPodSpec)(customPodSpec, rootCA), rootCA);
    });
}
function getOrcaClient() {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            if (orcaClient.isInitialized) {
                resolve(orcaClient.client);
                return;
            }
            const checkInterval = setInterval(() => {
                if (orcaClient.isInitialized) {
                    clearInterval(checkInterval);
                    resolve(orcaClient.client);
                }
            }, 500);
            setTimeout(() => {
                clearInterval(checkInterval);
                reject(new Error("OrcaClient initialization timed out."));
            }, 60000);
        });
    });
}
