"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.audit = void 0;
const namespace_wrapper_1 = require("@_koii/namespace-wrapper");
const taskManager_js_1 = require("../taskManager.js");
class Audit {
    /**
     * Validates the submission value by your logic
     *
     * @param {string} submission_value - The submission value to be validated
     * @param {number} round - The current round number
     * @returns {Promise<boolean>} The validation result, return true if the submission is correct, false otherwise
     */
    validateNode(submission_value, round, submitter_pubkey) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`VALIDATE NODE FOR ROUND ${round} for ${submitter_pubkey}`);
            const taskManager = yield (0, taskManager_js_1.getTaskManager)();
            const vote = yield taskManager.auditSubmission(submission_value, round, submitter_pubkey);
            return vote !== null && vote !== void 0 ? vote : true;
        });
    }
    /**
     * Vote on the other nodes Submissions
     *
     * @param {number} roundNumber - The current round number
     * @returns {void}
     */
    auditTask(roundNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            yield namespace_wrapper_1.namespaceWrapper.validateAndVoteOnNodes(this.validateNode, roundNumber);
        });
    }
}
const audit = new Audit();
exports.audit = audit;
