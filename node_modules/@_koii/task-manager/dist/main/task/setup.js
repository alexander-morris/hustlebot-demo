"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupTask = setupTask;
const coreLogic_js_1 = require("./coreLogic.js");
const namespace_wrapper_1 = require("@_koii/namespace-wrapper");
function setupTask() {
    return __awaiter(this, void 0, void 0, function* () {
        if (namespace_wrapper_1.app) {
            namespace_wrapper_1.app.get("/taskState", (_req, res) => __awaiter(this, void 0, void 0, function* () {
                const state = yield namespace_wrapper_1.namespaceWrapper.getTaskState({
                    is_submission_required: true,
                    is_distribution_required: true,
                    is_available_balances_required: true,
                    is_stake_list_required: true,
                });
                console.log("TASK STATE", state);
                res.json({ taskState: state });
            }));
        }
        try {
            yield namespace_wrapper_1.namespaceWrapper.defaultTaskSetup();
        }
        catch (error) {
            console.error("SETUP ERROR:", error);
        }
        process.on("message", (m) => {
            console.log("CHILD got message:", m);
            if (!(m === null || m === void 0 ? void 0 : m.functionCall)) {
                return;
            }
            console.log(`${m.functionCall} called`);
            switch (m.functionCall) {
                case "submitPayload":
                    coreLogic_js_1.coreLogic.submitTask(m.roundNumber);
                    break;
                case "auditPayload":
                    coreLogic_js_1.coreLogic.auditTask(m.roundNumber);
                    break;
                case "executeTask":
                    coreLogic_js_1.coreLogic.task(m.roundNumber);
                    break;
                case "generateAndSubmitDistributionList":
                    coreLogic_js_1.coreLogic.selectAndGenerateDistributionList(m.roundNumber, m.isPreviousRoundFailed);
                    break;
                case "distributionListAudit":
                    coreLogic_js_1.coreLogic.auditDistribution(m.roundNumber);
                    break;
            }
        });
    });
}
