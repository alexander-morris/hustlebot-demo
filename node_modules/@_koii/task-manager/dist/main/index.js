"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.taskRunner = exports.initializeTaskManager = exports.getTaskManager = void 0;
// required to use local staking wallet during testing in namespaceWrapper
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
const namespace_wrapper_1 = require("@_koii/namespace-wrapper");
const setup_js_1 = require("./task/setup.js");
const taskManager_js_1 = require("./taskManager.js");
var taskManager_js_2 = require("./taskManager.js");
Object.defineProperty(exports, "getTaskManager", { enumerable: true, get: function () { return taskManager_js_2.getTaskManager; } });
Object.defineProperty(exports, "initializeTaskManager", { enumerable: true, get: function () { return taskManager_js_2.initializeTaskManager; } });
var coreLogic_js_1 = require("./task/coreLogic.js");
Object.defineProperty(exports, "taskRunner", { enumerable: true, get: function () { return coreLogic_js_1.coreLogic; } });
function startTask() {
    return __awaiter(this, void 0, void 0, function* () {
        if (namespace_wrapper_1.taskNodeAdministered) {
            yield (0, setup_js_1.setupTask)();
        }
        const taskManager = yield (0, taskManager_js_1.getTaskManager)();
        yield taskManager.customSetup();
        console.log("after custom setup");
        if (!namespace_wrapper_1.taskNodeAdministered) {
            namespace_wrapper_1.app.use((req, _res, next) => {
                const directories = req.url.split("/");
                req.url = `/${directories.slice(3).join("/")}`;
                next();
            });
        }
        yield taskManager.setupRoutes();
    });
}
startTask();
