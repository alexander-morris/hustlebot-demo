"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const socket_io_client_1 = require("socket.io-client");
const rpc_service_1 = require("./rpc.service");
const child_process = require("child_process");
const util = require("util");
const exec = util.promisify(child_process.exec);
class OrcaPulse {
    constructor() {
        this._socket = null;
        this._rpcService = null;
    }
    async checkPodState(podId) {
        try {
            const { stdout, stderr } = await exec(`podman pod inspect ${podId} --format json`);
            if (stderr.length > 0) {
                throw new Error(stderr);
            }
            const podInfo = JSON.parse(stdout);
            return podInfo;
        }
        catch (error) {
            return error.message;
        }
    }
    initialize(podImageUrl, podId, orcaUrl, podSpec, healthcheck = 'healthz', rootCA, timeout = 600000) {
        let endTimeout = null;
        console.log('healthcheck type', healthcheck);
        endTimeout = timeout;
        let timeoutCleaner = null;
        this._socket = (0, socket_io_client_1.io)(`${orcaUrl}/${podId}`, {
            auth: {
                connectionType: 'orcaPulse',
            },
            ca: rootCA,
        });
        this._rpcService = new rpc_service_1.default(this._socket);
        this._socket.emit('orcaPulse:init', {
            podImageUrl,
            podId,
            orcaUrl,
            podSpec,
        });
        return new Promise((resolve, reject) => {
            const healthCheckTimer = setInterval(() => {
                try {
                    if (healthcheck === 'container') {
                        console.log('in container healthcheck');
                        let allContainerRunning = false;
                        this.checkPodState(podId)
                            .then((res) => {
                            if (res.State === 'Running' && res.NumContainers === 3) {
                                res.Containers.forEach((container) => {
                                    if (container['State'] === 'running') {
                                        allContainerRunning = true;
                                    }
                                    else {
                                        allContainerRunning = false;
                                    }
                                });
                                console.log('Checking health of the containers...');
                                if (allContainerRunning) {
                                    console.log('all container are in running state:', allContainerRunning);
                                    clearInterval(healthCheckTimer);
                                    timeoutCleaner += 1;
                                    setTimeout(() => {
                                        resolve(200);
                                    }, 2000);
                                }
                            }
                        })
                            .catch((err) => {
                            console.debug('Pod not in ready state');
                        });
                    }
                    else if (healthcheck === 'healthz') {
                        console.log('in healthz healthcheck');
                        this.podCall('healthz', {
                            method: 'POST',
                            body: JSON.stringify({}),
                        })
                            .then((res) => {
                            console.log('res status for healthz', res);
                            if (res.status == 200) {
                                clearInterval(healthCheckTimer);
                                timeoutCleaner += 1;
                                resolve(res.status);
                            }
                        })
                            .catch((err) => {
                            console.debug('Pod not in ready state');
                        });
                    }
                    else {
                    }
                }
                catch {
                }
            }, 1000);
            setTimeout(() => {
                if (timeoutCleaner >= 1) {
                    clearInterval(healthCheckTimer);
                }
                else {
                    clearInterval(healthCheckTimer);
                    this.close();
                    throw new Error("Couldn't connect to pod [timeout occurred], disconnecting and closing application");
                }
            }, endTimeout);
        });
    }
    close() {
        this._socket.disconnect();
    }
    handle(fnName, fnCallback) {
        this._rpcService.bindFn(fnName, fnCallback);
    }
    podCall(name, args = {}) {
        return this._rpcService.callFn(name, args);
    }
}
exports.default = OrcaPulse;
//# sourceMappingURL=app.service.js.map